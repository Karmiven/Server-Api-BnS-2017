// Обновленный main.min.js с исправлениями ошибок

// Функция для безопасного получения элемента
function getElementSafe(selector) {
  if (!selector || selector === '#') {
    console.warn('Invalid selector:', selector);
    return null;
  }
  try {
    const el = document.querySelector(selector);
    if (!el) {
      console.warn(`Element not found: ${selector}`);
      return null;
    }
    return el;
  } catch (e) {
    console.warn('Invalid selector:', selector, e);
    return null;
  }
}

// Функция для безопасного добавления обработчика
function addEventListenerSafe(selector, event, handler) {
  const element = getElementSafe(selector);
  if (element) {
    element.addEventListener(event, handler);
  }
}

// Воспроизведение/пауза видео
function togglePlayPause() {
  const videoPlayer = getElementSafe("#videoPlayer");
  const playButton = getElementSafe("#playButton");
  
  if (videoPlayer && playButton) {
    if (videoPlayer.paused) {
      videoPlayer.play();
      playButton.style.display = "none";
    } else {
      videoPlayer.pause();
      playButton.style.display = "block";
    }
  }
}

// Установка сложности класса
function setClassDifficulty(className) {
  const difficulties = {
    "Assassin": 5,
    "Blade Master": 4,
    "Destroyer": 3,
    "Force Master": 3,
    "Kung Fu Master": 4.5,
    "Summoner": 1,
    "Blade Dancer": 4,
    "Warlock": 2.5,
    "Soul Fighter": 5,
    "Gunslinger": 2,
    "Warden": 3.5,
    "Zen Archer": 4,
    "Dual Blade": 3
  };
  
  const starsContainer = getElementSafe("#modal-difficulty-stars");
  if (!starsContainer) return;
  
  starsContainer.innerHTML = "";
  const difficulty = difficulties[className] || 1;
  
  for (let i = 1; i <= 5; i++) {
    const star = document.createElement("div");
    star.classList.add("star");
    star.classList.add(i <= difficulty ? "star-filled" : "star-empty");
    starsContainer.appendChild(star);
  }
}

// Инициализация при загрузке DOM
document.addEventListener("DOMContentLoaded", function() {
  // Проверка авторизации
  const username = localStorage.getItem("username");
  const profileLink = getElementSafe("#profileLink");
  const usernameElement = getElementSafe("#username");
  const usernameContainer = getElementSafe("#usernameContainer");
  const signupText = getElementSafe(".signup-text");
  
  if (username) {
    if (profileLink) profileLink.href = `${window.location.origin}/profile?userName=${encodeURIComponent(username)}`;
    if (usernameElement) usernameElement.textContent = username;
    if (usernameContainer) usernameContainer.classList.remove("d-none");
    if (signupText) signupText.classList.add("d-none");
  } else {
    if (usernameContainer) usernameContainer.classList.add("d-none");
    if (signupText) signupText.classList.remove("d-none");
  }
  
  // Обработчик выхода
  addEventListenerSafe("#logoutLink", "click", function(e) {
    e.preventDefault();
    localStorage.removeItem("username");
    window.location.reload();
  });
  
  // Проверка доната
  const path = window.location.pathname;
  if (path === "/donate") {
    const urlParams = new URLSearchParams(window.location.search);
    const userNameParam = urlParams.get("userName");
    const currentUser = localStorage.getItem("username");
    
    if (userNameParam && userNameParam !== currentUser) {
      alert("Вы не можете делать пожертвования, так как вы не авторизованы с этим аккаунтом.");
      window.location.href = "/";
    }
  }
  
  // Обработчики для классов
  document.querySelectorAll(".game-classes-icon").forEach(icon => {
    icon.addEventListener("click", function(e) {
      e.preventDefault();
      
      const modal = getElementSafe("#customModal");
      if (!modal) return;
      
      const classData = {
        name: this.getAttribute("data-class"),
        image: this.getAttribute("data-image"),
        description: this.getAttribute("data-description"),
        races: JSON.parse(this.getAttribute("data-races") || "[]"),
        racesText: JSON.parse(this.getAttribute("data-races-text") || "[]")
      };
      
      // Установка данных в модальное окно
      const titleElement = getElementSafe("#modal-class-title");
      const imageElement = getElementSafe("#modal-class-image");
      const descElement = getElementSafe("#modal-class-description");
      const racesContainer = getElementSafe("#modal-races-images");
      
      if (titleElement) titleElement.innerText = classData.name;
      if (imageElement) imageElement.src = classData.image;
      if (descElement) descElement.innerText = classData.description;
      
      if (racesContainer) {
        racesContainer.innerHTML = "";
        classData.races.forEach((raceImg, index) => {
          const raceDiv = document.createElement("div");
          raceDiv.classList.add("race-container");
          
          const img = document.createElement("img");
          img.src = raceImg;
          
          const p = document.createElement("p");
          p.innerText = classData.racesText[index] || "";
          
          raceDiv.appendChild(img);
          raceDiv.appendChild(p);
          racesContainer.appendChild(raceDiv);
        });
      }
      
      setClassDifficulty(classData.name);
      
      // Показ модального окна
      modal.style.display = "block";
      setTimeout(() => {
        modal.classList.add("show");
      }, 10);
      
      const modalContent = modal.querySelector(".custom-modal-content");
      const modalImage = modal.querySelector(".modal-image");
      const modalText = modal.querySelector(".modal-text");
      
      setTimeout(() => {
        if (modalContent) modalContent.classList.add("show");
      }, 100);
      
      if (modalImage) modalImage.classList.add("show");
      if (modalText) modalText.classList.add("show");
    });
  });
  
  // Закрытие модального окна
  addEventListenerSafe(".close-button", "click", function() {
    const modal = getElementSafe("#customModal");
    if (!modal) return;
    
    modal.classList.remove("show");
    const modalContent = modal.querySelector(".custom-modal-content");
    const modalImage = modal.querySelector(".modal-image");
    const modalText = modal.querySelector(".modal-text");
    
    if (modalContent) modalContent.classList.remove("show");
    if (modalImage) modalImage.classList.remove("show");
    if (modalText) modalText.classList.remove("show");
    
    setTimeout(() => {
      modal.style.display = "none";
    }, 500);
  });
  
  // Закрытие модального окна по клику вне его
  window.addEventListener("click", function(e) {
    const modal = getElementSafe("#customModal");
    if (modal && e.target === modal) {
      modal.classList.remove("show");
      const modalContent = modal.querySelector(".custom-modal-content");
      const modalImage = modal.querySelector(".modal-image");
      const modalText = modal.querySelector(".modal-text");
      
      if (modalContent) modalContent.classList.remove("show");
      if (modalImage) modalImage.classList.remove("show");
      if (modalText) modalText.classList.remove("show");
      
      setTimeout(() => {
        modal.style.display = "none";
      }, 500);
    }
  });
  
  // Ленивая загрузка секций
  const lazySections = document.querySelectorAll(".lazy-section");
  if (lazySections.length > 0) {
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add("visible");
          observer.unobserve(entry.target);
        }
      });
    }, { threshold: 0.1 });
    
    lazySections.forEach(section => {
      observer.observe(section);
    });
  }
  
  // Прелоадер
  const preloader = getElementSafe("#preloader");
  if (preloader) {
    window.addEventListener("load", function() {
      preloader.style.opacity = "0";
      setTimeout(() => {
        preloader.style.display = "none";
      }, 500);
    });
  }
  
  // Карусель событий
  const eventsCarousel = getElementSafe("#eventsCarousel");
  if (eventsCarousel) {
    eventsCarousel.style.display = "block";
    new bootstrap.Carousel(eventsCarousel).cycle();
  }
  
  // Плавная прокрутка для навигации
  document.querySelectorAll('a.nav-link[href^="#"]').forEach(link => {
    const href = link.getAttribute("href");
    if (href && href !== '#') {
      link.addEventListener("click", function(e) {
        e.preventDefault();
        const targetId = href.substring(1);
        const target = getElementSafe(`#${targetId}`);
        
        if (target) {
          const navbar = getElementSafe(".custom-navbar");
          const navbarHeight = navbar ? navbar.offsetHeight : 0;
          const targetPosition = target.getBoundingClientRect().top + window.pageYOffset - navbarHeight - 10;
          
          window.scrollTo({
            top: targetPosition,
            behavior: "smooth"
          });
        }
      });
    }
  });
});

// Инициализация сложности для всех классов
["Assassin", "Blade Master", "Destroyer", "Force Master", "Kung Fu Master", 
 "Summoner", "Blade Dancer", "Warlock", "Soul Fighter", "Gunslinger", 
 "Warden", "Zen Archer", "Dual Blade"].forEach(className => {
  setClassDifficulty(className);
});

// Обработчик кнопки воспроизведения
addEventListenerSafe("#playButton", "click", function() {
  const videoPlayer = getElementSafe("#videoPlayer");
  const playButton = getElementSafe("#playButton");
  const videoThumbnail = getElementSafe("#videoThumbnail");
  
  if (videoPlayer && playButton && videoThumbnail) {
    playButton.style.display = "none";
    videoThumbnail.style.display = "none";
    videoPlayer.classList.remove("d-none");
    videoPlayer.style.display = "block";
    videoPlayer.play();
  }
});